class Line{
	constructor(unemstate, crimerate){
		this.unemstate = unemstate;
        this.crimerate = crimerate;
		this.drawInit();
		this.drawupdate(unemstate,"unemployment");
	}
	drawInit(){
        let that = this
		let linesvg = d3.select("div#lineChart")
		                .append("svg")
		             	.attr("width",580)
		                .attr("height",550)
        let x_scale = d3.scaleLinear()
                    .domain([2007,2018])
                    .range([0,520])
                    .nice()
        let x_axis = d3.axisBottom(x_scale)
                       .tickFormat(d=>d)
        	           //.tickSize(1)
        	           .tickPadding(6)
        linesvg.append("g")
               .call(x_axis)    
               .attr("transform","translate(20,510)")
        //console.log(d3.min(this.crimerate, d=>parseInt(d.rate)))
        // let selection_button = d3.select(".btn-group").selectAll("button").data([1,2,3])
        // //console.log(selection_button)
        // selection_button.on("click",function(d){
        //     if(d == 1){
        //         //console.log(that.crimerate)
        //         that.drawupdate(that.unemstate, "unemployment")
        //     }
        //     if(d == 2){
        //         that.drawupdate(that.crimerate, "crime")
        //     }
        // })

	}
	drawupdate(activedata,type){
		let that = this
        d3.select("div#lineChart").select("svg").remove();
        // let oldaxis = linesvg.selectAll(".axisy").remove()
        // let name = linesvg.append("text").attr("class","activeYear-background").attr("x",300).attr("y",100).attr("id","linename")
        if (type == "unemployment"){
            let linesvg = d3.select("div#lineChart")
                            .append("svg")
                            .attr("width",580)
                            .attr("height",550)
            let x_scale = d3.scaleLinear()
                            .domain([2007,2018])
                            .range([0,520])
                            .nice()
            let x_axis = d3.axisBottom(x_scale)
                           .tickFormat(d=>d)
                           //.tickSize(1)
                           .tickPadding(6)
            linesvg.append("g")
                   .call(x_axis)    
                   .attr("transform","translate(40,510)")
            let name = linesvg.append("text").attr("class","activeYear-background").attr("x",300).attr("y",100).attr("id","linename")
        	//linesvg.selectAll(".lines").remove()                 
        	let y_scale = d3.scaleLinear()
                            .domain([15,0])
                            .range([0,500])
                            .nice()
            let y_axis = d3.axisLeft(y_scale)
            	           .tickSize(0)
            	           .tickPadding(6)
            linesvg.append("g")
                   .call(y_axis)
                   .attr("transform","translate(40,10)")
                   .attr("class","axisy")
            linesvg.append("line")
                   .attr("x1",0)
                   .attr("y1",y_scale(2))
                   .attr("x2",520)
                   .attr("y2",y_scale(2))
                   .attr("transform","translate(40,10)")
                   .classed("linespace", true)
            linesvg.append("line")
                   .attr("x1",0)
                   .attr("y1",y_scale(4))
                   .attr("x2",520)
                   .attr("y2",y_scale(4))
                   .attr("transform","translate(40,10)")
                   .classed("linespace", true)
            linesvg.append("line")
                   .attr("x1",0)
                   .attr("y1",y_scale(6))
                   .attr("x2",520)
                   .attr("y2",y_scale(6))
                   .attr("transform","translate(40,10)")
                   .classed("linespace", true)
            linesvg.append("line")
                   .attr("x1",0)
                   .attr("y1",y_scale(8))
                   .attr("x2",520)
                   .attr("y2",y_scale(8))
                   .attr("transform","translate(40,10)")
                   .classed("linespace", true)
            linesvg.append("line")
                   .attr("x1",0)
                   .attr("y1",y_scale(10))
                   .attr("x2",520)
                   .attr("y2",y_scale(10))
                   .attr("transform","translate(40,10)")
                   .classed("linespace", true)
            linesvg.append("line")
                   .attr("x1",0)
                   .attr("y1",y_scale(12))
                   .attr("x2",520)
                   .attr("y2",y_scale(12))
                   .attr("transform","translate(40,10)")
                   .classed("linespace", true)
            linesvg.append("line")
                   .attr("x1",0)
                   .attr("y1",y_scale(14))
                   .attr("x2",520)
                   .attr("y2",y_scale(14))
                   .attr("transform","translate(40,10)")
                   .classed("linespace", true)
            linesvg.append("line")
                   .attr("x1",x_scale(2007))
                   .attr("y1",0)
                   .attr("x2",x_scale(2007))
                   .attr("y2",500)
                   .attr("transform","translate(40,10)")
                   .attr("stroke","red")
                   .attr("stroke-dasharray","2 2")
                   .attr("stroke-opacity",0.8)
                   .attr("id","yearline")
	        for (let i = 0; i < activedata.length; i = i + 12){
    	    	let path = "M"
        		for (let j = 0; j<12; j++){
            	    path = path + x_scale(2007+j) + "," + y_scale(activedata[i+j]["Unemployment-rate"])
            	    if (j!= 11){
            	    	path += "L"
            	    }
	        	}
    	    	//console.log(path)
    	    	linesvg.append("path")
    	    	       .attr("d",path)
    	    	       .attr("class","lines")
    	    	       .attr("id", activedata[i]["State"].replace(/[ ]/g,""))
    	    	       .attr("fill", "none")
    	    	       .attr("stroke", "grey")
    	    	       .attr("transform","translate(40,10)")
            }
        }
        if (type == "crime"){
            let linesvg = d3.select("div#lineChart")
                            .append("svg")
                            .attr("width",580)
                            .attr("height",550)
            let x_scale = d3.scaleLinear()
                            .domain([2007,2018])
                            .range([0,520])
                            .nice()
            let x_axis = d3.axisBottom(x_scale)
                           .tickFormat(d=>d)
                           //.tickSize(1)
                           .tickPadding(6)
            linesvg.append("g")
                   .call(x_axis)    
                   .attr("transform","translate(40,510)")
            let name = linesvg.append("text").attr("class","activeYear-background").attr("x",300).attr("y",100).attr("id","linename")                          
            let y_scale = d3.scaleLinear()
                            .domain([1000,0])
                            .range([0,500])
                            .nice()
            let y_axis = d3.axisLeft(y_scale)
                           .tickSize(0)
                           .tickPadding(6)
            linesvg.append("g")
                   .call(y_axis)
                   .attr("transform","translate(40,10)")
                   .attr("class","axisy")
            linesvg.append("line")
                   .attr("x1",0)
                   .attr("y1",y_scale(100))
                   .attr("x2",520)
                   .attr("y2",y_scale(100))
                   .attr("transform","translate(40,10)")
                   .classed("linespace", true)
            linesvg.append("line")
                   .attr("x1",0)
                   .attr("y1",y_scale(200))
                   .attr("x2",520)
                   .attr("y2",y_scale(200))
                   .attr("transform","translate(40,10)")
                   .classed("linespace", true)
            linesvg.append("line")
                   .attr("x1",0)
                   .attr("y1",y_scale(300))
                   .attr("x2",520)
                   .attr("y2",y_scale(300))
                   .attr("transform","translate(40,10)")
                   .classed("linespace", true)
            linesvg.append("line")
                   .attr("x1",0)
                   .attr("y1",y_scale(400))
                   .attr("x2",520)
                   .attr("y2",y_scale(400))
                   .attr("transform","translate(40,10)")
                   .classed("linespace", true)
            linesvg.append("line")
                   .attr("x1",0)
                   .attr("y1",y_scale(500))
                   .attr("x2",520)
                   .attr("y2",y_scale(500))
                   .attr("transform","translate(40,10)")
                   .classed("linespace", true)
            linesvg.append("line")
                   .attr("x1",0)
                   .attr("y1",y_scale(600))
                   .attr("x2",520)
                   .attr("y2",y_scale(600))
                   .attr("transform","translate(40,10)")
                   .classed("linespace", true)
            linesvg.append("line")
                   .attr("x1",0)
                   .attr("y1",y_scale(700))
                   .attr("x2",520)
                   .attr("y2",y_scale(700))
                   .attr("transform","translate(40,10)")
                   .classed("linespace", true)
            linesvg.append("line")
                   .attr("x1",0)
                   .attr("y1",y_scale(800))
                   .attr("x2",520)
                   .attr("y2",y_scale(800))
                   .attr("transform","translate(40,10)")
                   .classed("linespace", true)
            linesvg.append("line")
                   .attr("x1",0)
                   .attr("y1",y_scale(900))
                   .attr("x2",520)
                   .attr("y2",y_scale(900))
                   .attr("transform","translate(40,10)")
                   .classed("linespace", true)
            linesvg.append("line")
                   .attr("x1",x_scale(2007))
                   .attr("y1",0)
                   .attr("x2",x_scale(2007))
                   .attr("y2",500)
                   .attr("transform","translate(40,10)")
                   .attr("stroke","red")
                   .attr("stroke-dasharray","2 2")
                   .attr("stroke-opacity",0.8)
                   .attr("id","yearline")
            for (let i = 12; i < activedata.length; i = i + 12){
                let path = "M"
                for (let j = 0; j<12; j++){
                    path = path + x_scale(2007+j) + "," + y_scale(activedata[i+j]["rate"])
                    if (j!= 11){
                        path += "L"
                    }
                }
                //console.log(path)
                linesvg.append("path")
                       .attr("d",path)
                       .attr("class","lines")
                       .attr("id", activedata[i]["State"].replace(/[ ]/g,""))
                       .attr("fill", "none")
                       .attr("stroke", "grey")
                       .attr("transform","translate(40,10)")
            }

        }
	}

}